

#have goto-tool &&
_goto-tool() {
    COMPREPLY=()
    local cur prev entries
    _get_comp_words_by_ref cur prev

	if [[ "$prev" == "list" ]]; then
		return 0;
	fi

	case $prev in
        get|add|rm|mv|use)
			entries=$( goto-tool list | cut -d ":" -f 1 )
			COMPREPLY=( $( compgen -W "$entries" -- "$cur" ) )
            return 0
            ;;
    esac

	_filedir
} &&
complete -F _goto-tool goto-tool


#have goget &&
_goget() {
    COMPREPLY=()
    local cur prev entries
    _get_comp_words_by_ref -n :  cur prev words cword

	if [[ "$prev" == "goget" ]]; then
        entries=$( goto-tool list | cut -d ":" -f 1 )
        compopt +o nospace &>/dev/null
        COMPREPLY=( $( compgen -W "$entries" -- "$cur" ) )

    elif [ "${#words[@]}" -eq 3 ]; then
        # completion for the optional subdir parameter

        subdir=${cur/:-/}
        dir=$( goto-tool get "$prev" )

        # Get dirs and files in the resolved path + appended path.
        # Append a / to every completion target if it's a directory.
        dirs=$( compgen -o default "$dir/$cur" | while read comp; do
                x="";
                if [ -d "$comp" ]; then x="/"; fi;
                echo ${comp#$dir/}$x; done )

        COMPREPLY=( $( compgen -W "$dirs" -- "$cur" ) )
	fi

	return 0
} &&
complete -o nospace -F _goget goget


#have goto &&
_goto() {
    COMPREPLY=()
    local cur prev entries
    _get_comp_words_by_ref -n : cur prev words cword

	if [[ "$prev" == "goto" ]]; then
        # completion for goto directories

        entries=$( goto-tool list | cut -d ":" -f 1 )
        compopt +o nospace &>/dev/null
        COMPREPLY=( $( compgen -W "$entries" -- "$cur" ) )

    elif [ "${#words[@]}" -eq 3 ]; then
        # completion for the optional subdir parameter

        # Quote the current input if it needs to be quoted
        _quote_readline_by_ref "$cur" quoted

        # Determine the subdir according to the given goto dir (prev param)
        subdir=${quoted/:-/}
        dir=$( goto-tool get "$prev" )

        # Find all directories in the target directory and generate
        # possible matches.
        dirs=$(
            compgen -o dirnames  "$dir/$quoted" | while read comp; do
                echo ${comp#$dir/}/
            done
        )

        # Gather all directory matches according to the current needle.
        # Be careful only to slice by newline to not truncate those
        # elements which have whitespaces in them.
        REPL=$( IFS=$'\n' compgen -W "$dirs" -- "$quoted" )

        # Quote each result found
        COMREPLY=()
        local i=0
        IFS=$'\n'
        for reply in $REPL; do
            _quote_readline_by_ref "$reply" qreply
            COMPREPLY[$i]="$qreply"
            i=$(($i + 1))
        done
	fi
	return 0
} &&
complete -o nospace -F _goto goto



# Local variables:
# mode: shell-script
# sh-basic-offset: 4
# sh-indent-comment: t
# indent-tabs-mode: nil
# End:
# ex: ts=4 sw=4 et filetype=sh
